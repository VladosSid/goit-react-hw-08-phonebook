{"version":3,"file":"static/js/865.7896e574.chunk.js","mappings":"icAWMA,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,WACnBC,MAAOJ,EAAAA,KAAaI,QAAQD,WAAWE,OACvCC,SAAUN,EAAAA,KAAaO,IAAI,GAAGJ,WAAWE,SAGpC,SAASG,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MAEjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOT,EAAP,KAAaU,EAAb,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOP,EAAP,KAAcS,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOL,EAAP,KAAiBQ,EAAjB,KACA,GAA0CH,EAAAA,EAAAA,UAAS,IAAnD,eAAOI,EAAP,KAAsBC,EAAtB,KAwBA,OACE,iCACE,SAAC,IAAD,CAASC,GAAG,KAAKC,KAAK,KAAtB,qBAIA,kBAAMC,SA5BS,SAAAC,GACjBA,EAAEC,iBACF,IAAMC,EAAO,CAAEpB,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,GACxBA,IAAaS,EAgBjBQ,IAAAA,OAAAA,QAAwB,6BAftBxB,EACGyB,QAAQ,CACPtB,KAAAA,EACAE,MAAAA,EACAE,SAAAA,IAEDmB,MAAK,SAAUC,GACVA,EACFjB,EAASkB,EAAAA,GAAAA,SAAwBL,IAGnCC,IAAAA,OAAAA,QAAwB,yBACzB,GAIN,EAQG,WACE,SAAC,IAAD,oBACA,SAAC,IAAD,CACEK,SAAUhB,EACViB,MAAO3B,EACPA,KAAM,OACN4B,QAAS,YAGX,SAAC,IAAD,qBACA,SAAC,IAAD,CACEF,SAAUf,EACVgB,MAAOzB,EACPF,KAAM,QACN4B,QAAS,aAGX,SAAC,IAAD,wBACA,SAAC,IAAD,CACEF,SAAUd,EACVZ,KAAM,WACN2B,MAAOvB,EACPwB,QAAS,UACTC,KAAM,WACNC,MAAM,KAGR,SAAC,IAAD,wBACA,SAAC,IAAD,CACEJ,SAAUZ,EACVd,KAAM,gBACN2B,MAAOd,EACPe,QAAS,WACTC,KAAM,WACNC,MAAM,KAGR,SAAC,IAAD,CAGED,KAAK,SAHP,yBAUP,CAED,W","sources":["components/Authorization/SingIn.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { Heading, Button, FormLabel } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport * as yup from 'yup';\nimport Notiflix from 'notiflix';\n\nimport { authOperations } from 'redux/auth';\n\nimport PasswordInput from './PasswordInput';\nimport EmailInput from './EmailInput';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  email: yup.string().email().required().trim(),\n  password: yup.string().min(7).required().trim(),\n});\n\nexport function SingIn() {\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [passwordCheck, setPasswordCheck] = useState('');\n\n  const submitUser = e => {\n    e.preventDefault();\n    const user = { name, email, password };\n    if (password === passwordCheck) {\n      schema\n        .isValid({\n          name,\n          email,\n          password,\n        })\n        .then(function (valid) {\n          if (valid) {\n            dispatch(authOperations.register(user));\n            return;\n          }\n          Notiflix.Notify.warning('Invalid data format!!!');\n        });\n      return;\n    }\n    Notiflix.Notify.failure('Passwords do not match!!!');\n  };\n\n  return (\n    <>\n      <Heading as=\"h2\" size=\"xl\">\n        SingIn\n      </Heading>\n\n      <form onSubmit={submitUser}>\n        <FormLabel>Name</FormLabel>\n        <EmailInput\n          onChange={setName}\n          value={name}\n          name={'Name'}\n          variant={'filled'}\n        />\n\n        <FormLabel>Email</FormLabel>\n        <EmailInput\n          onChange={setEmail}\n          value={email}\n          name={'email'}\n          variant={'outline'}\n        />\n\n        <FormLabel>Password</FormLabel>\n        <PasswordInput\n          onChange={setPassword}\n          name={'password'}\n          value={password}\n          variant={'flushed'}\n          type={'password'}\n          show={true}\n        />\n\n        <FormLabel>Password</FormLabel>\n        <PasswordInput\n          onChange={setPasswordCheck}\n          name={'passwordCheck'}\n          value={passwordCheck}\n          variant={'unstyled'}\n          type={'password'}\n          show={true}\n        />\n\n        <Button\n          // disabled={passwordCheck === '' ?? (password === '' && 'disabled')}\n          // tipe=\"submit\"\n          type=\"submit\"\n        >\n          SingIn\n        </Button>\n      </form>\n    </>\n  );\n}\n\nexport default SingIn;\n"],"names":["schema","yup","shape","name","required","email","trim","password","min","SingIn","dispatch","useDispatch","useState","setName","setEmail","setPassword","passwordCheck","setPasswordCheck","as","size","onSubmit","e","preventDefault","user","Notiflix","isValid","then","valid","authOperations","onChange","value","variant","type","show"],"sourceRoot":""}